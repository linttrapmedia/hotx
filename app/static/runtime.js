class J{_state;constructor(){this._state="INIT"}dispatch(_,q,O){return O.append("state",this.state),O.append("event",q),fetch(_??"/api",{method:"POST",body:O}).then(async(A)=>{if(!A.ok)throw new Error(A.statusText);const b=await A.json();return window.hotx.state=b.state,Object.entries(b.dom).forEach(([B,w])=>{Object.entries(w).forEach(([z,I])=>{const C=document.querySelector(z);if(C)C[B]=I})}),b}).catch((A)=>{console.error("There has been a problem with your fetch operation:",A)})}get state(){return this._state}set state(_){this._state=_}}document.addEventListener("DOMContentLoaded",function(){window.hotx=new J;function _(q){const O=Array.from(q.querySelectorAll("[hot-event]"));for(let A of O.values()){if(A.getAttribute("hot-ready")==="true")continue;const b=A.getAttribute("hot-machine"),B=A.getAttribute("hot-event"),w=A.getAttribute("hot-form"),z=A.getAttribute("hot-data"),I=A.tagName==="INPUT"?"change":A.tagName==="SELECT"?"change":A.tagName==="TEXTAREA"?"change":A.tagName==="FORM"?"submit":"click",C=A.getAttribute("hot-trigger")??I;A.setAttribute("hot-ready","true"),A.addEventListener(C,function(K){if(K.preventDefault(),w){const E=w==="this"?A:document.querySelector(w),G=new FormData(E);window.hotx.dispatch(b,B,G).then(()=>E.reset())}if(z){const E=z==="this"?A:document.querySelector(z),G=new FormData;Object.entries(E.dataset).forEach(([L,N])=>G.append(L,N)),window.hotx.dispatch(b,B,G)}})}}_(document),new MutationObserver(function(q){for(let O of q)_(O.target)}).observe(document,{childList:!0,subtree:!0})});
